;   FILE  -> DBAS07
;   FCON converts from floating point to a string in stracc
FCONHX TYA
 BPL FCONHF
 JSR IFIX
FCONHF LDXIM 0
 LDYIM 0
HEXPLP LDAAY IACCL
 PHA
 ANDIM &0F
 STAAX WORK+8
 PLA
 LSRA
 LSRA
 LSRA
 LSRA
 INX
 STAAX WORK+8
 INX
 INY
 CPYIM 4
 BNE HEXPLP
HEXLZB DEX
 BEQ HEXP
 LDAAX WORK+8
 BEQ HEXLZB
HEXP LDAAX WORK+8
 CMPIM &0A
 BCC NOTHX
 ADCIM &06
NOTHX ADCIM &30
 JSR CHTOBF
 DEX
 BPL HEXP
 RTS
FPRTA LDA FACCS
 BPL FPRTC
 LDAIM "-"
 CLR FACCS
 JSR CHTOBF
FPRTC LDA FACCX
 CMPIM &81 ;get into range 1.0000 to 9.9999
 BCS FPRTD
 JSR FTENFX
 DEC FPRTDX
 BRA FPRTC
FCON LDX VARL+2 ;flag forcing E
 CPXIM 3
 BCC FCONOK
 LDXIM 0 ;Default to G format
FCONOK STX WORK
 LDA VARL+1
 BEQ FCONC
 CMPIM &0A
 BCS FCONA
;  In G,E formats varl is no. of sig figs >0
;  In F format it is no. of decimals and can be >=0
 BRA FCONB
FCONC CPXIM 2
 BEQ FCONB
FCONA LDAIM 10 ;enter here for str$, having set work to 0
FCONB STA WORK+1
 STA FDIGS
 CLR CLEN
 CLR FPRTDX
 BIT PRINTF
 BMI FCONHX
 TYA
 BMI FCONFX
 JSR IFLT
FCONFX LDA FACCMA
 BNE FPRTA
 LDA WORK
 BNE FPRTHH
 LDAIM "0"
 JMP CHTOBF
FPRTEE JSR FONE
 BRA FPRTE+3
FPRTD CMPIM &84 ;EXPONENT OF 9.99
 BCC FPRTF ;1.0 TO 7.9999 ALL OK
 BNE FPRTE ;EXPONENT 85 OR MORE
 LDA FACCMA ;FINE CHECK IF X=84
 CMPIM &A0
 BCC FPRTF ;8.0000 TO 9.9999
FPRTE JSR FTENFQ
 INC FPRTDX
 BRA FPRTC
FPRTF JSR FTOW
 LDA FDIGS
 STA WORK+1
 LDX WORK
 CPXIM 2
 BNE FPRTFH ;NOT 'F' FORMAT
 ADC FPRTDX ;FIX UP THE PRECISION
 BMI FPRTZR
 CMPIM 11
 BCC FPRTFH-2 ;PRECISION REASONABLE
 LDAIM 10
 CLR WORK ;TREAT AS 'G' FORMAT
 STA WORK+1
FPRTFH LDA WORK+1
 EORIM -1
 LSRA
 PHP
 ASLA
 ASLA
 ADCIM ONEP0+3 ;CY set
 JSR FLDCOF ;load power of 0.01, 4 bytes accuracy
 DEC FACCX ;.00,,005 for odd varl
 PLP
 BCC FPRTGJ
 JSR FTENFX ; * 10 for even varl
FPRTGJ JSR FADDW1 ;rounded
FPRTFF LDA FACCX
 CMPIM &84
 BCS FPRTG
 JSR FRENRM+2
 BNE FPRTFF
FPRTG LDA FACCMA
 CMPIM &A0 ;SEE IF UNNORMALIZED
 BCS FPRTEE ;FIX UP IF SO
 LDA WORK+1
 BNE FPRTH
FPRTHH CMPIM 1
 BEQ FPRTK
FPRTZR JSR FCLR
 CLR FPRTDX
 LDA FDIGS
 INA
 STA WORK+1
; THE EXPONENT IS $84, SO THE TOP DIGIT OF THE ACC IS THE FIRST DIG TO PRINT
FPRTH LDAIM 1
 CMP WORK
 BEQ FPRTK
 LDY FPRTDX
 BMI FPRTKK
 CPY WORK+1
 BCS FPRTK ;USE SCIENTIFIC IF <1.0 OR > 10^DIGITS
 CLR FPRTDX ;USE F TYPE FORMAT
 INY
 TYA
 BNE FPRTK
FPRTKK LDA WORK
 CMPIM 2
 BEQ FPRTKL ;F FORMAT CASE
 LDAIM 1
 CPYIM &FF
 BNE FPRTK ;SET E FORMAT
FPRTKL LDAIM "0"
 JSR CHTOBF
 LDAIM "."
 JSR CHTOBF
 LDAIM "0"
FPRTKM INC FPRTDX
 BEQ FPRTKN
 JSR CHTOBF
 BRA FPRTKM
FPRTKN LDAIM &80
FPRTK STA FPRTWN
FPRTI JSR FPRTNN
 DEC FPRTWN
 BNE FPRTL
 LDAIM "."
 JSR CHTOBF
FPRTL DEC WORK+1
 BNE FPRTI
 LDY WORK
 DEY
 BEQ FPRTTX
 DEY
 BEQ FPRTTY+2
 LDY CLEN
FPRTTZ DEY
 LDAAY STRACC ;inspect for and remove trailing zeroes
 CMPIM "0"
 BEQ FPRTTZ
 CMPIM "."
 BEQ FPRTTY
 INY
FPRTTY STY CLEN
 LDA FPRTDX
 BEQ FPRTX ;EXPONENT=0
FPRTTX LDAIM "E"
 JSR CHTOBF
 LDA FPRTDX
 BPL FPRTJ
 LDAIM "-"
 JSR CHTOBF
 SEC
 LDAIM 0
 SBC FPRTDX
FPRTJ JSR IPRT
 LDA WORK
 BEQ FPRTX
 LDAIM " "
 LDY FPRTDX
 BMI FPRTTW
 JSR CHTOBF
FPRTTW CPXIM 0
 BEQ CHTOBF
FPRTX RTS
;   PRINT AC IN DECIMAL UNSIGNED
IPRT LDXIM &FF
 SEC
IPRTA INX
 SBCIM 10
 BCS IPRTA
 ADCIM 10
 PHA
 TXA
 BEQ IPRTB
 JSR FPRTDG
IPRTB PLA
FPRTDG ORAIM "0"
CHTOBF PHX
 LDX CLEN
 STAAX STRACC
 PLX
 INC CLEN
 RTS
;   READ ROUTINES
FRDDXX CLC
 LDAIM &FF
 JMP FTSTZ+2
FRDD CLR FACCMA
 CLR FACCMB
 CLR FACCMC
 CLR FACCMD
 CLR FACCMG
 CLR FRDDDP ;DECIMAL POINT FLAG
 CLR FRDDDX ;DECIMAL EXPONENT
 LDXIM -1 ;FRDDW tags length of arithmetic
 STX FRDDW ;to 1,3,5 bytes or too long
 CMPIM "." ;Y points to this character
 BEQ FRDD1 ;LEADING DECIMAL POINT
 CMPIM &3A
 BCS FRDDXX
 SBCIM &2F
 BMI FRDDXX
FRDD3 STA FACCMG
 LDA FRDDDP
 BEQ .+4
 DEC FRDDDX ;undo * 10 after "."
FRDD2 INY
 LDAIY AELINE
 CMPIM &3A
 BCS FRDDD
 SBCIM &2F
 BCC FRDDC
 STA FTMPMA
 LDX FRDDW
 BPL FRDD4
 LDA FACCMG ;1 BYTE ARITH.
 ASLA
 ASLA
 ADC FACCMG
 ASLA
 ADC FTMPMA
 CMPIM 25 ;OVERFLOW next time?
 BCC FRDD3
 CLR FRDDW ;if so,arith. to 3 bytes
 BRA FRDD3
FRDD4 CPXIM 2
 BCS FRDD5 ;too many digits
 JSR FTENX ;* 10
 CMPIM 25 ;OVERFLOW next time?
 BCC .+5
 INC FRDDW ;if so, lengthen arithmetic
 CLC
 LDA FTMPMA
 ADC FACCMG
 BCC FRDD3
 JSR FPLNFH 
 BRA FRDD3
FRDD5 INC FRDDDX ;instead of * 10 + FTMPMA
 BRA FRDD3+2
FRDDC EORIM "."-48 ;was it "." ?
 ORA FRDDDP  ;"." seen before?
 BNE FRDDQ ;2nd "." is end of number
FRDD1 INC FRDDDP ;set flag
 BRA FRDD2 ;get more CHARs
FRDDD CMPIM "E"
 BNE FRDDQ
FRDDEX JSR IRDD ;GET EXPONENT
 ADC FRDDDX
 STA FRDDDX
FRDDQ STY AECUR ; Y now free for use
 LDY FACCMA
 BNE FRFP ;too long for INT
 LDA FACCMB
 BMI FRFP ;ditto
 STA IACCH
 BEQ FRINT ;3-byte nos. FNRMed via IACC & IFLT
 LDA FRDDDX
 ORA FRDDDP
 BNE FRFP ;4-byte nos to IACC only if true INT
FRINT LDA FACCMG
 STA IACCL
 LDA FACCMD
 STA IACCM
 LDA FACCMC
 STA IACCN
 LDA FRDDDX
 BNE FRFP1
 INA
 SEC
 RTS
FRFP1 JSR IFLT
 BNE FRFP2
 BRA FRDDZZ ;if =0.0, exit at once
FRFP LDAIM &A8
 STA FACCX
 CLR FACCS
 CLR FACCXH
 TYA
 JSR FNRM2
;   now * or / by power of 10.0 given in FRDDDX
FRFP2 LDY FRDDDX
 BMI FRDDM
 BEQ FRDDZ
FRDDP JSR FTENFX ;* 10.0
 DEY
 BNE FRDDP
 BRA FRDDZ
FRDDM JSR FTENFQ ;/ 10.0
 INY
 BNE FRDDM
FRDDZ JSR FTIDY ;ROUND, CHECK OVERFLOW
FRDDZZ SEC
 LDAIM -1
 RTS
IRDDB JSR IRDDC
 EORIM &FF
 SEC
 RTS
IRDD INY
 LDAIY AELINE
 CMPIM "-"
 BEQ IRDDB
 CMPIM "+"
 BNE IRDDA
IRDDC INY
 LDAIY AELINE
IRDDA CMPIM &3A
 BCS IRDDQ-2
 SBCIM &2F
 BCC IRDDQ-2
 STA FRDDW
 INY
 LDAIY AELINE
 CMPIM &3A
 BCS IRDDQ
 SBCIM &2F
 BCC IRDDQ
 INY
 STA FTMPMA
 LDA FRDDW
 ASLA
 ASLA
 ADC FRDDW
 ASLA
 ADC FTMPMA
 RTS
 CLR FRDDW
IRDDQ LDA FRDDW
 CLC
 RTS
FTOW LDA FACCS
 STA FWRKS
 LDA FACCMB
 STA FWRKMB
 LDA FACCMC
 STA FWRKMC
 LDA FACCMD
 STA FWRKMD
 LDA FACCMG
 STA FWRKMG
 LDA FACCMA
 STA FWRKMA
 LDA FACCX ;last transfer X
 STA FWRKX
 RTS
FPRTNN LDA FACCMA
 LSRA
 LSRA
 LSRA
 LSRA
 JSR FPRTDG
 LDAIM &F0
 TRB FACCMA
 LDXIM 1 ;5 byte arithm.
;   Get next digit ready by multiplying mantissa by 10
FTENX ASL FACCMG
 ROL FACCMD
 ROL FACCMC
 TXA
 BEQ FTENX1 ;only 3 bytes used
 ROL FACCMB
 ROL FACCMA
FTENX2 LDA FACCMA
 PHA
 LDA FACCMB
 PHA
FTENX1 LDA FACCMC
 PHA
 LDA FACCMD
 PHA
 LDA FACCMG
 CPXIM 0
 BMI FTENX4
 BNE FTENX5
 ASLA
 ROL FACCMD
 ROL FACCMC
 ASLA
 ROL FACCMD
 ROL FACCMC
 BRA FTENX6 ;CARRY CLEAR
FTENX5 ASLA
 ROL FACCMD
 ROL FACCMC
 ROL FACCMB
 ROL FACCMA
 DEX
 BPL FTENX5 ;CARRY CLEAR
FTENX6 ADC FACCMG
 STA FACCMG
 PLA
 ADC FACCMD
 STA FACCMD
 PLA
 ADC FACCMC
 STA FACCMC
 INX ;X was 0 for 3 bytes arithm.
 BNE FRENX ; -1 for 5 bytes
 PLA
 ADC FACCMB
 STA FACCMB
 PLA
 BRA FPLWF1
;   MULT FACC by 10.0; X register used, FWRK not involved.
;   FX:=FX+3; FACC:=FACC+(FACC>>2)
;   IF CARRY THEN FACC:=FACC>>1; FX:=FX+1
FTENFX CLC
 LDA FACCX
 ADCIM 3
 LDXIM -2
 STA FACCX
 BCC FTENX2
 INC FACCXH
 BRA FTENX2
FTENX4 LSR FACCMA
 ROR FACCMB
 ROR FACCMC
 ROR FACCMD
 RORA
 INX
 BNE FTENX4
 DEX
 BRA FTENX6
;    ADD WRK+CY TO ACC, LEAVE RESULT IN ACC, don't TIDY or disturb WRK
FPLWF LDA FACCMG
 ADC FWRKMG
 STA FACCMG
 LDA FACCMD
 ADC FWRKMD
 STA FACCMD
 LDA FACCMC
 ADC FWRKMC
 STA FACCMC
 LDA FACCMB
 ADC FWRKMB
 STA FACCMB
 LDA FWRKMA
FPLWF1 ADC FACCMA
 STA FACCMA
;   CY is set on adding to, or rounding up, of FACCMA 
FRENRM BCC FRENX
 ROR FACCMA
 ROR FACCMB
 ROR FACCMC
 ROR FACCMD
 ROR FACCMG
 INC FACCX
 BNE FRENX
 INC FACCXH
FRENX RTS
;   FTENFQ divide FACC by 10.0; X-register used; FWRK unaffected
;   FX:=FX-4; ACC:=ACC+(ACC>>4); ADJUST IF CARRY
;   ACC:=ACC+(ACC>>1); ADJUST IF CY
;   ACC:=ACC+(ACC>>8); ADJUST IF CY
;   ACC:=ACC+(ACC>>16); ADJUST IF CY
;   ACC:=ACC+(ACC>>32); ADJUST IF CY
FTENFQ CLC
 LDAIM -4
 TAX
 ADC FACCX
 BCS .+4
 DEC FACCXH
 STA FACCX
 JSR FTENX2 ;* 0.00010001
 DEX
 JSR FTENX2 ;* 0.000110011
 INX
FTENQB LDAAX FACCMD
 ROLA ;SET CY CORRECTLY
 LDAAX FACCMC
 ADC FACCMG
 STA FACCMG
 LDAAX FACCMB
 ADC FACCMD
 STA FACCMD
 LDAAX FACCMA
 ADC FACCMC
 STA FACCMC
 TXA
 BEQ .+4
 LDA FACCMA
 ADC FACCMB
 STA FACCMB
 BCC .+9
 INC FACCMA
 BNE .+5
 JSR FRENRM+2
 DEX
 BPL FTENQB ;1st time OK to 16 bits
 LDA FACCMB ;2nd time OK to 32 bits
 ROLA
 LDA FACCMA
 ADC FACCMG
 STA FACCMG
 BCC FPLNY
FPLNFH INC FACCMD
 BNE FPLNY
FPLNFI INC FACCMC
 BNE FPLNY
FPLNFJ INC FACCMB
 BNE FPLNY
 INC FACCMA
 BEQ FRENRM+2;carry set
FPLNY RTS
FLDW CLR FWRKMG
 LDYIM 4
 LDAIY ARGP
 STA FWRKMD
 DEY
 LDAIY ARGP
 STA FWRKMC
 DEY
 LDAIY ARGP
 STA FWRKMB
 DEY
 LDAIY ARGP
 STA FWRKS
 TAY
 LDAI ARGP
 STA FWRKX
 BNE FLDWZ
 TYA
 ORA FWRKMB
 ORA FWRKMC
 ORA FWRKMD
 BEQ FLDWX
FLDWZ TYA
 ORAIM &80
FLDWX STA FWRKMA
 RTS
STARGC LDAIM FWSC
 BRA FSTAP
STARGA LDAIM FWSA
FSTAP STA ARGP
 LDAIM /FWSA
 STA ARGP+1
;   FSTA STORES ACC
FSTA LDYIM 1
 LDA FACCS ;TIDY UP SIGN BYTE
 EOR FACCMA
 ANDIM &80
 EOR FACCMA
 STAIY ARGP
 LDA FACCMB
 INY
 STAIY ARGP
 LDA FACCMC
 INY
 STAIY ARGP
 LDA FACCMD
 INY
 STAIY ARGP
 LDA FACCX ;last transfer X
 STAI ARGP
 RTS
FLDSTK JSR POPSET
 BRA FLDA
FLDCOF LDYIM /HALFPI
 BRA .+6
LDARGA LDAIM FWSA
FLDARG LDYIM /FWSA
 STA ARGP
 STY ARGP+1
FLDA CLR FACCMG
 CLR FACCXH
 LDYIM 4
 LDAIY ARGP
 STA FACCMD
 DEY
 LDAIY ARGP
 STA FACCMC
 DEY
 LDAIY ARGP
 STA FACCMB
 DEY
 LDAIY ARGP
 STA FACCS
 TAY
 LDAI ARGP
 STA FACCX
 BNE FLDAZ
 TYA
 ORA FACCMB
 ORA FACCMC
 ORA FACCMD
 BEQ FLDAX
FLDAZ TYA
 ORAIM &80
FLDAX STA FACCMA
 RTS
 LNK DBAS08
