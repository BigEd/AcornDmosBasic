;                               FILE 4 match text subrs stmt > DBAS03

INTOK STAI WORK ;insert token in A into line
 CLC
 TYA
 ADC WORK
 STA WORK+2
 LDYIM 0
 TYA
 ADC WORK+1
 STA WORK+3
INTOKA INY ;replace
 LDAIY WORK+2
 STAIY WORK
 CMPIM &0D
 BNE INTOKA ;move rest of line down
 RTS
CONSTQ ANDIM &0F ;check if a constant
 STA WORK+6
 LDXIM 0 ;high byte in X
 LDYIM 0
CONSTR INY
 LDAIY WORK
 JSR NUMBCP
 BCC CONSTX
 ANDIM &0F
 PHA
 STX WORK+7
 LDA WORK+6
 ASLA
 ROL WORK+7
 BMI CONSTY
 ASLA
 ROL WORK+7
 BMI CONSTY
 ADC WORK+6
 STA WORK+6
 TXA
 ADC WORK+7
 ASL WORK+6
 ROLA
 BMI CONSTY
 BCS CONSTY
 TAX
 PLA
 ADC WORK+6
 STA WORK+6
 BCC CONSTR
 INX
 BPL CONSTR
 PHA
CONSTY PLA ;>32767 so can't be
 SEC
 RTS
CONSTX DEY
 LDAIM TCONST
 JSR INTOK ;keeps X
 LDA WORK
 STA WORK+2
 LDA WORK+1
 STA WORK+3
 JSR NEXTCH
 JSR NEXTCH
 JSR NEXTCH
CONSTL LDAIY WORK+2
 STAIY WORK
 DEY
 BNE CONSTL ;y<>0 initially since at least tconst cr
 LDYIM 3
CONSTI TXA ;insert constant, high in X, low in WORK+6
 ORAIM &40
 STAIY WORK+2
 DEY
 LDA WORK+6
 ANDIM &3F
 ORAIM &40
 STAIY WORK+2
 DEY
 LDAIM :NOT: &C0
 TRB WORK+6
 TXA
 ANDIM &C0
 LSRA
 LSRA
 ORA WORK+6
 LSRA
 LSRA
 EORIM &54
 STAIY WORK+2
WORDCN CLC
 RTS
WORDCQ CMPIM &7B ;check if character in A is wordc
 BCS WORDCN
 CMPIM "_"
 BCS WORDCY
 CMPIM &5B
 BCS WORDCN
 CMPIM "A"
 BCS WORDCY
NUMBCP CMPIM &3A
 BCS WORDCN
 CMPIM "0" ;bcs wordcy;bcc wordcn reduced somewhat!
WORDCY RTS
NUMBCQ CMPIM "."
 BNE NUMBCP
 RTS
GETWRK LDAI WORK
NEXTCH INC WORK
 BNE RELRTS
 INC WORK+1
 RTS
GETWK2 JSR NEXTCH
 LDAI WORK
 RTS
MATCHB JSR NEXTCH
MATCHA LDAI WORK
 CMPIM &0D
 BEQ RELRTS ;if ch='cr' end
 CMPIM " "
 BEQ MATCHB ;if ch=' ' then nextch
 CMPIM "&"
 BNE CMATCH ;if ch='&' then
MATCHC JSR GETWK2 ;repeat nextch
 JSR NUMBCP ;until ch<'0' or ch>'9' and ch <'A' or ch>'F'
 BCS MATCHC
 CMPIM "A"
 BCC MATCHA
 CMPIM "G"
 BCC MATCHC ;if carry set >="G" goto matcha, but ends up at cmatch anyway
CMATCH CMPIM """"
 BNE DMATCH ;if ch='"' then
MATCHD JSR GETWK2 ;repeat nextch
 CMPIM """" ;until ch='cr' or ch='"'
 BEQ MATCHB
 CMPIM &0D
 BNE MATCHD
RELRTS RTS
DMATCH CMPIM ":"
 BNE MATCHE ;if ch=':'
 JSR NEXTCH
MATCH CLR MODE
MATCEV CLR CONSTA
 BRA MATCHA ;mode:=left;constant:=false;nextch;matcha
MATCHE CMPIM ","
 BEQ MATCHB ;if ch=',' then nextch;matcha
 CMPIM "*"
 BNE FMATCH ;if ch='*'
 LDA MODE
 BEQ RELRTS ;and mode=left then end
YMATCH LDXIM &FF
 STX MODE ;mode:=right
 CLR CONSTA ;const:=false
 BRA MATCHB
FMATCH CMPIM "."
 BEQ MATCHZ
 JSR NUMBCP
 BCC GMATCH ;if ch>="0"' and ch<='9'
 LDX CONSTA
 BEQ MATCHZ ;if constant=true
 JSR CONSTQ
 BCC MATCHB
MATCHZ LDAI WORK ;not found numeric:- while numbcq
 JSR NUMBCQ
 BCC MATCHY
 JSR NEXTCH ;do nextch
 BRA MATCHZ
MATCHY LDXIM &FF
 STX MODE
 BRA MATCEV
MATCHW JSR WORDCQ
 BCC YMATCH
MATCHG LDAI WORK ;not found:- while wordcq
 JSR WORDCQ
 BCC MATCHY
 JSR NEXTCH ;do nextch
 BRA MATCHG
GMATCH CMPIM "A" ;lookupword (optimised for none present words)
 BCC YMATCH
 CMPIM "X"
 BCS MATCHW
 LDXIM TOKENS
 STX WORK+2
 LDXIM /TOKENS
 STX WORK+3 ;list start
IMATCH LDYIM 0
 CMPI WORK+2 ;special check on first char
 BCC MATCHG
 BNE JMATCH
KMATCH INY
 LDAIY WORK+2
 BMI LMATCH
 CMPIY WORK
 BEQ KMATCH
 LDAIY WORK
 CMPIM "."
 BEQ ABBREV
JMATCH INY
 LDAIY WORK+2
 BPL JMATCH
 CMPIM TWIDTH ;last token in list
 BNE MMATCH
 BCS MATCHG
ABBREV INY
ABBREA LDAIY WORK+2
 BMI LMATCH
 INC WORK+2
 BNE ABBREA
 INC WORK+3
 BRA ABBREA
MMATCH SEC
 INY
 TYA
 ADC WORK+2
 STA WORK+2
 BCC NMATCH
 INC WORK+3
NMATCH LDAI WORK
 BRA IMATCH
LMATCH TAX ;token held in x for now
 INY
 LDAIY WORK+2
 STA WORK+6 ;job to work+6
 DEY
 LSRA
 BCC OMATCH ;if job and 1
 LDAIY WORK
 JSR WORDCQ ;if ch+1 = wordc
 BCS MATCHG
OMATCH TXA ;carry clear at OMATCH
 BIT WORK+6
 BVC WMATCH ;if job and 64
 LDX MODE
 BNE WMATCH ;and mode=left
 ADCIM TPTR2-&8F
WMATCH DEY
 JSR INTOK
 LDXIM &FF
 LDA WORK+6
 LSRA
 LSRA
 BCC QMATCH ;if job and 2
 STX MODE ;mode:=right
 CLR CONSTA ;constant:=false
QMATCH LSRA
 BCC RMATCH ;if job and 4
 CLR MODE ;mode:=left
 CLR CONSTA ;constant:=false
RMATCH LSRA
 BCC TMATCH ;if job and 8
 PHA
 LDYIM 1
SMATCH LDAIY WORK ;while ch+1=wordc
 JSR WORDCQ
 BCC XMATCH
 JSR NEXTCH
 BRA SMATCH
XMATCH PLA
TMATCH LSRA
 BCC UMATCH
 STX CONSTA
UMATCH LSRA
 BCS AESPAR ;if job and 32 end
 JMP MATCHB
AESPAC LDY AECUR ;get next character from the aeline,aecur
 INC AECUR
 LDAIY AELINE
 CMPIM " "
 BEQ AESPAC
AESPAR RTS
SPACES LDY CURSOR ;get next character from the line, cursor
 INC CURSOR
 LDAIY LINE
 CMPIM " "
 BEQ SPACES
COMRTS RTS
COMCHK JSR AESPAC ;check for a , in aeline and give error if none
 CMPIM ","
 RTS
INEXCM JSR INEXPR ;gets INT, stacks and checks for ,
 JSR PHACC
COMEAT JSR COMCHK
 BEQ COMRTS
COMERR BRK
 = 5
 = &8D,","
 BRK
CHAIN JSR LOADER
 BRA RUNNER
;  old command does ?&3001=0 finds new end of text and frees
OLD JSR DONE
 LDA TXTP
 STA WORK+1
 CLR WORK
 LDAIM 0
 STAIY WORK
 JSR ENDER
 BRA FSASET
RUN JSR DONE
RUNNER JSR SETFSA
 LDA TXTP
 STA LINE+1
 CLR LINE
 BRA RUNTHG
LOAD JSR LOADER
 BRA FSASET
;  end statement finds end of text and stops
END JSR DONE
 JSR ENDER
 BRA CLRSTK
ENTRYY LDAIM &F2
 JSR SINSTK
 JSR READBYTE
 TAX
 JSR READBYTE
 STA IACCM
 STX IACCL
 LDXIM 20
ENTRYL DEX
 BEQ FORMAT
 JSR READBYTE
 CMPIM &0D
 BEQ FORMAT
 CMPIM "@"
 BNE ENTRYL
 JSR READBYTE
 CMPIM &0D
 BNE FORMAT ;check for special *BASIC @
 JSR FROMAT
; CLR LOMEM
; LDA TXTP
; INA
; STA LOMEM+1 ;done for the interpreter by the editor
ENTRYT LDYIM 0
 CLR LINE
 LDAIM /BUFFER
 STA LINE+1
ENTRYM LDAI LOMEM
 BEQ FSASET
 STAIY LINE
 INY
 BEQ FORMAT
 INC LOMEM
 BNE .+4
 INC LOMEM+1
 CMPIM &0D
 BNE ENTRYM
 LDA LOMEM+1
 CMP HIMEM+1
 BCS FSASET
 JSR SUPERBIT
 BRA ENTRYT
;  new command clears text and frees
NEW JSR DONE
FORMAT JSR FROMAT
FSASET JSR SETFSA
CLRSTK LDYIM /BUFFER
 STY LINE+1
 CLR LINE ;BUFFER=0
 JSR ORDERR
 LDAIM ">"
 JSR OSWRCH
 JSR BUFF
RUNTHG LDXIM &FF
 TXS
 JSR ORDERR ;set up to run something
 JSR SUPERBIT
 BCS FSASET
 BRA DC
;  call operating system statement
DOS JSR CLYADP
 LDX LINE
 LDY LINE+1
 JSR OSCLI
DATA   ;data statement ignored
DEF   ;def statement ignored
REM LDAIM &0D
 LDY CURSOR
 DEY
ILP INY
 CMPIY LINE
 BNE ILP
ELSELN JSR CLYADP
 BRA CRLINE
ENDEDL CMPIM 13
 BNE REM
CRLINE LDA LINE+1
 CMPIM /BUFFER
 BEQ CLRSTK
 LDYIM 1
 LDAIY LINE
 BMI CLRSTK
 LDX TRFLAG
 BEQ NOTR2
 STA IACCM
 INY
 LDAIY LINE
 STA IACCL
 JSR TRJOBA
NOTR2 LDYIM 4
 STY CURSOR
 BRA STMT+2
ASS LDAIM 3
 STA BYTESM
 JMP CASM
SETEXJ JMP SETEXT
OTSTMT LDY CURSOR
 DEY
 LDAIY LINE
 CMPIM "*"
 BEQ DOS
 CMPIM "["
 BEQ ASS
 CMPIM TEXT
 BEQ SETEXJ
 CMPIM "="
 BEQ FNRET
SUNK DEC CURSOR
DONEXT JSR DONE
NXT LDAI LINE
 CMPIM ":"
 BNE ENDEDL
STMT LDY CURSOR ;statement execution
 INC CURSOR
 LDAIY LINE
 CMPIM " "
 BEQ STMT
 CMPIM TPTR2 ;lowest poly
 BCC LETST
DISPATCH ASLA
 TAX
 JMIX ADTABL-&E-&E
DC JSR SPACES ;direct mode command
 CMPIM TAUTO
 BCS DISPATCH
LETST JSR AELVV
 BNE GOTLT
 BCS OTSTMT
 STX AECUR
 JSR EQEAT
 JSR CREATE
 LDXIM 5
 CPX IACCN
 BNE LETSZ
 INX
LETSZ JSR CREAX
 DEC CURSOR
;  let statement
LET JSR CRAELV
 BEQ NOLET
GOTLT BCC LETED
 JSR PHACC
 JSR EQEXPR
 LDA TYPE
 BNE LETM
 JSR STSTOR
 BRA NXT
FNRET TSX
 CPXIM &FC
 BCS FNERR
 LDA &01FF
 CMPIM TFN
 BNE FNERR
 JSR AEEXPR
 JMP FDONE
LETED LDA IACCL ;assign to number
 PHA
 LDA IACCM
 PHA
 LDA IACCN
 PHA
 JSR EQEXPR
 JSR STORE
 BRA NXT
NOLET JMP STDED
;  stop statement prints that it has stopped
STOP JSR DONE
 BRK
 BRK
 = TSTOP
FNERR BRK
 = 7
 = "No ",TFN
LETM BRK
 = 6
 = "Type mismatch"
ALLOCR BRK
 BRK
 = "No room"
 BRK
STSTOR JSR POPACC ;subr to store string where told
STSTRE LDA IACCN
 CMPIM &80
 BEQ NSTR
 LDYIM 2
 LDAIY IACCL
 CMP CLEN
 BCS ALLOCX  ;old mlen >= to new len
 LDA FSA
 STA IACCN
 LDA FSA+1
 STA IACCH
 LDA CLEN
 CMPIM 8
 BCC ALLOCU ;if <8 characters then use this as mlen
 ADCIM 7 ;else add 8
 BCC ALLOCU
 LDAIM &FF ;but max is 255
ALLOCU CLC
 PHA
 TAX
 LDAIY IACCL ;is new space contiguous to old?
 ADCI IACCL
 EOR FSA
 BNE ALLJIM
 DEY
 ADCIY IACCL
 EOR FSA+1
 BNE ALLJIM
 STA IACCH ;new space is, so reduce amount needed
 TXA
 INY
 SEC
 SBCIY IACCL
 TAX
ALLJIM TXA
 CLC
 ADC FSA
 TAY
 LDA FSA+1
 ADCIM 0
 TAX
 CPY AESTKP ;are we hitting our heads on the roof?
 SBC AESTKP+1
 BCS ALLOCR
 STY FSA
 STX FSA+1
 PLA
 LDYIM 2
 STAIY IACCL ;new mlen
 DEY
 LDA IACCH
 BEQ ALLOCX ;we were contiguous
 STAIY IACCL
 LDA IACCN
 STAI IACCL
ALLOCX LDYIM 3
 LDA CLEN
 STAIY IACCL
 BEQ STDONE
 LDYIM 1
 LDAIY IACCL
 STA IACCH
 LDAI IACCL
 STA IACCN
 DEY
LTCVRM LDAAY STRACC
 STAIY IACCN
 INY
 CPY CLEN
 BNE LTCVRM
STDONE RTS
NSTR JSR OSSTRT
 CPYIM 0
 BEQ NSTRX
NSLOOP LDAAY STRACC
 STAIY IACCL
 DEY
 BNE NSLOOP
 LDA STRACC
NSTRX STAI IACCL
 RTS
 LNK DBAS04
